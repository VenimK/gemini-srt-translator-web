name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ['3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint Python code
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    
    - name: Verify application starts
      run: |
        python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        SERVER_PID=$!
        sleep 5
        curl -s http://localhost:8000/health || echo "Server not running"
        kill $SERVER_PID
      shell: bash

  release:
    name: Create Release
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set version
      id: version
      run: |
        VERSION="1.0.0"
        if [ -f static/package.json ]; then
          VERSION=$(grep '"version"' static/package.json | cut -d'"' -f4 || echo "1.0.0")
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ### How to use
          1. Download the zip file
          2. Extract it
          3. Run `pip install -r requirements.txt`
          4. Run `python main.py`
        draft: false
        prerelease: false
    
    - name: Create ZIP artifact
      run: |
        mkdir -p release
        cp -r static/ release/static/
        cp -r backend/ release/backend/
        cp main.py requirements.txt README.md config.json release/
        cd release
        zip -r ../gemini-srt-translator-v${{ steps.version.outputs.version }}.zip .
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./gemini-srt-translator-v${{ steps.version.outputs.version }}.zip
        asset_name: gemini-srt-translator-v${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip
